
package de.coderarea.jrdp.protocol.MCS.BN_BER;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Integer;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;


@ASN1PreparedElement
@ASN1Sequence(name = "DomainParameters", isSet = false)
public class DomainParameters implements IASN1PreparedElement {
    @ASN1Integer(name = "")

    @ASN1Element(name = "maxChannelIds", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long maxChannelIds = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "maxUserIds", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long maxUserIds = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "maxTokenIds", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long maxTokenIds = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "numPriorities", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long numPriorities = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "minThroughput", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long minThroughput = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "maxHeight", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long maxHeight = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "maxMCSPDUsize", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long maxMCSPDUsize = null;

    @ASN1Integer(name = "")

    @ASN1Element(name = "protocolVersion", isOptional = false, hasTag = false, hasDefaultValue = false)

    private Long protocolVersion = null;


    public Long getMaxChannelIds() {
        return maxChannelIds;
    }

    public void setMaxChannelIds(Long maxChannelIds) {
        this.maxChannelIds = maxChannelIds;
    }

    public Long getMaxUserIds() {
        return maxUserIds;
    }

    public void setMaxUserIds(Long maxUserIds) {
        this.maxUserIds = maxUserIds;
    }

    public Long getMaxTokenIds() {
        return maxTokenIds;
    }

    public void setMaxTokenIds(Long maxTokenIds) {
        this.maxTokenIds = maxTokenIds;
    }

    public Long getNumPriorities() {
        return numPriorities;
    }

    public void setNumPriorities(Long numPriorities) {
        this.numPriorities = numPriorities;
    }

    public Long getMinThroughput() {
        return minThroughput;
    }

    public void setMinThroughput(Long minThroughput) {
        this.minThroughput = minThroughput;
    }

    public Long getMaxHeight() {
        return maxHeight;
    }

    public void setMaxHeight(Long maxHeight) {
        this.maxHeight = maxHeight;
    }

    public Long getMaxMCSPDUsize() {
        return maxMCSPDUsize;
    }

    public void setMaxMCSPDUsize(Long maxMCSPDUsize) {
        this.maxMCSPDUsize = maxMCSPDUsize;
    }

    public Long getProtocolVersion() {
        return protocolVersion;
    }

    public void setProtocolVersion(Long protocolVersion) {
        this.protocolVersion = protocolVersion;
    }

    public void initWithDefaults() {

    }

    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(DomainParameters.class);

    public IASN1PreparedElementData getPreparedData() {
        return preparedData;
    }

    @Override
    public String toString() {
        return "DomainParameters{" +
                "maxChannelIds=" + maxChannelIds +
                ", maxUserIds=" + maxUserIds +
                ", maxTokenIds=" + maxTokenIds +
                ", numPriorities=" + numPriorities +
                ", minThroughput=" + minThroughput +
                ", maxHeight=" + maxHeight +
                ", maxMCSPDUsize=" + maxMCSPDUsize +
                ", protocolVersion=" + protocolVersion +
                '}';
    }
}
            
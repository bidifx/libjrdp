
package de.coderarea.jrdp.protocol.MCS.BN_BER;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.*;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.coders.TagClass;

import java.util.Arrays;


@ASN1PreparedElement
@ASN1BoxedType(name = "Connect_Initial")
public class Connect_Initial implements IASN1PreparedElement {


    @ASN1PreparedElement
    @ASN1Sequence(name = "Connect-Initial", isSet = false)
    public static class Connect_InitialSequenceType implements IASN1PreparedElement {
        @ASN1OctetString(name = "")

        @ASN1Element(name = "callingDomainSelector", isOptional = false, hasTag = false, hasDefaultValue = false)

        private byte[] callingDomainSelector = null;

        @ASN1OctetString(name = "")

        @ASN1Element(name = "calledDomainSelector", isOptional = false, hasTag = false, hasDefaultValue = false)

        private byte[] calledDomainSelector = null;

        @ASN1Boolean(name = "")

        @ASN1Element(name = "upwardFlag", isOptional = false, hasTag = false, hasDefaultValue = false)

        private Boolean upwardFlag = null;


        @ASN1Element(name = "targetParameters", isOptional = false, hasTag = false, hasDefaultValue = false)

        private DomainParameters targetParameters = null;


        @ASN1Element(name = "minimumParameters", isOptional = false, hasTag = false, hasDefaultValue = false)

        private DomainParameters minimumParameters = null;


        @ASN1Element(name = "maximumParameters", isOptional = false, hasTag = false, hasDefaultValue = false)

        private DomainParameters maximumParameters = null;

        @ASN1OctetString(name = "")

        @ASN1Element(name = "userData", isOptional = false, hasTag = false, hasDefaultValue = false)

        private byte[] userData = null;


        public byte[] getCallingDomainSelector() {
            return this.callingDomainSelector;
        }


        public void setCallingDomainSelector(byte[] value) {
            this.callingDomainSelector = value;
        }


        public byte[] getCalledDomainSelector() {
            return this.calledDomainSelector;
        }


        public void setCalledDomainSelector(byte[] value) {
            this.calledDomainSelector = value;
        }


        public Boolean getUpwardFlag() {
            return this.upwardFlag;
        }


        public void setUpwardFlag(Boolean value) {
            this.upwardFlag = value;
        }


        public DomainParameters getTargetParameters() {
            return this.targetParameters;
        }


        public void setTargetParameters(DomainParameters value) {
            this.targetParameters = value;
        }


        public DomainParameters getMinimumParameters() {
            return this.minimumParameters;
        }


        public void setMinimumParameters(DomainParameters value) {
            this.minimumParameters = value;
        }


        public DomainParameters getMaximumParameters() {
            return this.maximumParameters;
        }


        public void setMaximumParameters(DomainParameters value) {
            this.maximumParameters = value;
        }


        public byte[] getUserData() {
            return this.userData;
        }


        public void setUserData(byte[] value) {
            this.userData = value;
        }


        public void initWithDefaults() {

        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Connect_InitialSequenceType;
        }

        private static IASN1PreparedElementData preparedData_Connect_InitialSequenceType = CoderFactory.getInstance().newPreparedElementData(Connect_InitialSequenceType.class);

        @Override
        public String toString() {
            return "Connect_InitialSequenceType{" +
                    "callingDomainSelector=" + Arrays.toString(callingDomainSelector) +
                    ", calledDomainSelector=" + Arrays.toString(calledDomainSelector) +
                    ", upwardFlag=" + upwardFlag +
                    ", targetParameters=" + targetParameters +
                    ", minimumParameters=" + minimumParameters +
                    ", maximumParameters=" + maximumParameters +
                    ", userData=" + Arrays.toString(userData) +
                    '}';
        }
    }


    @ASN1Element(name = "Connect-Initial", isOptional = false, hasTag = true, tag = 101,
            tagClass = TagClass.Application, hasDefaultValue = false)

    private Connect_InitialSequenceType value;


    public Connect_Initial() {
    }


    public void setValue(Connect_InitialSequenceType value) {
        this.value = value;
    }


    public Connect_InitialSequenceType getValue() {
        return this.value;
    }


    public void initWithDefaults() {
    }

    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Connect_Initial.class);

    public IASN1PreparedElementData getPreparedData() {
        return preparedData;
    }

    @Override
    public String toString() {
        return "Connect_Initial{" +
                "value=" + value +
                '}';
    }
}
            